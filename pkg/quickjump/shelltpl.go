package quickjump

// JumpBashTpl is the bash template for quick jump
var JumpBashTpl = `# Put the line below in ~/.bashrc or ~/bash_profile:
#
#   eval "$(kite tool jump shell bash)"
#   # set the bind func name is: j
#   eval "$(kite tool jump shell bash --bind j)"
#
# The following lines are autogenerated:

# hooks on dir changed
__jump_prompt_command() {
    # x: is number
    # cmd: the command name
    # eg: "j" or "j /path/to/dir"
    local lastCmd=$(history 1 | {
        read x cmd args
        echo "$cmd"
    })

    # kite util log "lastCmd $lastCmd" --type bash-jump-chdir
    # Do not process other commands executed
    if [[ $lastCmd != "{{bindFunc}}" ]]; then
        return 0
    fi

    local status=$?
    kite jump chdir && return $status
}

# will call func on every command exec.
[[ "$PROMPT_COMMAND" =~ __jump_prompt_command ]] || {
    PROMPT_COMMAND="__jump_prompt_command;$PROMPT_COMMAND"
}

# completion func for {{bindFunc}}
# refer https://blog.csdn.net/qq_38883889/article/details/106543271
__jump_completion() {
    # example:
    # input 'jump hi'
    # - $COMP_LINE='jump hi'
    # - $term='hi'
    local term="${COMP_WORDS[COMP_CWORD]}"

    local commands=$(kite jump hint --no-name "$term")
    #    echo commands:
    #    echo $commands --- ${commands[@]}
    #    COMPREPLY=$commands
    COMPREPLY=($commands)
#    echo $COMPREPLY
#    echo ${COMPREPLY[2]}
#    echo all --- ${COMPREPLY[@]}
    #    COMPREPLY=("${commands[@]}")
    return
}

{{bindFunc}}() {
    local dir
    dir=$(kite jump get "$@")
    test -d "$dir" && cd "$dir"
}

# for use echo
#complete -o dirnames -C '__jump_completion' {{bindFunc}}
# for use COMPREPLY
complete -o dirnames -o plusdirs -F __jump_completion {{bindFunc}}

# add alias for: kite jump
alias kj="kite jump"
`

// JumpZshTpl is the zsh template for quick jump
var JumpZshTpl = `# Put the line below in ~/.zshrc or ~/zsh_profile:
#
#   eval "$(kite tool jump shell zsh)"
#   # set the bind func name is: j
#   eval "$(kite tool jump shell zsh --bind j)"
#
# for DEBUG:
#   set -x # start
#   set +x # stop
#   typeset -ft __jump_chpwd # start for given function
#   typeset +ft __jump_chpwd # stop
#   typeset -ft _jump_completion # start for given function
#   typeset +ft _jump_completion # stop
#
# The following lines are autogenerated:

# change pwd hook
__jump_chpwd() {
    # eg:
    # ': 1649259804:0;j /path/to'
    # => x=':' cmd='1649259804:0;j' args='/path/to'
    local midStr=$(tail -n 1 $HOME/.zsh_history | {
        read x cmd args
        echo "$cmd"
    })

    local lastCmd=${midStr#*;}
    # Do not process other commands executed
    if [[ $lastCmd != "{{bindFunc}}" ]]; then
        return 0
    fi

    kite jump chdir
}

typeset -gaU chpwd_functions
chpwd_functions+=(__jump_chpwd)

# completion func for {{bindFunc}}
_jump_completion() {
    local state
    typeset -a commands histories

    kite util log "current $@ $#" --type "jump-comp1"
    kite util log "words: $words (w1: $words[1] w2: $words[2]) state: $state" --type "jump-comp2"

    # commands+=($(kite jump hint "$@"))
    commands+=($(kite jump hint --flag 1 $words[2]))
    histories+=($(kite jump hint --flag 2 $words[2]))
    #  _describe -t 'commands' commands
    _describe 'commands' commands -- histories
    _alternative \
        'files:filename:_files'
}

{{bindFunc}}() {
    local dir
    dir=$(kite jump get "$@")
    test -d "$dir" && cd "$dir"
}

# for use reply
# compctl -U -K _jump_completion {{bindFunc}}
# for use _describe
compdef _jump_completion '{{bindFunc}}'
# compctl -U -K _jump_completion {{bindFunc}}
`
